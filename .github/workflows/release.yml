name: Build and Publish Latest Dev Build

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  APP_NAME: "Structra"
  PROJECT_NAME: "structra.xcodeproj"
  SCHEME_NAME: "structra"
  DEV_RELEASE_TAG: "latest-dev-build"
  DMG_FILENAME: "Structra-latest.dmg"

jobs:
  build-and-publish:
    name: Publish Latest Dev Build
    runs-on: "macos-15"
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get short commit hash as version
        id: get_version
        run: echo "VERSION=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      # Cache Homebrew packages
      - name: Cache Homebrew
        uses: actions/cache@v4
        with:
          path: |
            ~/Library/Caches/Homebrew
            /usr/local/Homebrew
          key: ${{ runner.os }}-homebrew-${{ hashFiles('.github/workflows/*.yml') }}
          restore-keys: |
            ${{ runner.os }}-homebrew-

      # Cache DerivedData for faster builds
      - name: Cache DerivedData
        uses: actions/cache@v4
        with:
          path: ~/Library/Developer/Xcode/DerivedData
          key: ${{ runner.os }}-deriveddata-${{ hashFiles('**/*.xcodeproj/project.pbxproj', '**/*.xcworkspace/contents.xcworkspacedata') }}-${{ hashFiles('**/*.swift', '**/*.h', '**/*.m') }}
          restore-keys: |
            ${{ runner.os }}-deriveddata-${{ hashFiles('**/*.xcodeproj/project.pbxproj', '**/*.xcworkspace/contents.xcworkspacedata') }}-
            ${{ runner.os }}-deriveddata-

      # Cache Swift Package Manager dependencies
      - name: Cache SPM dependencies
        uses: actions/cache@v4
        with:
          path: |
            .build
            ~/Library/Developer/Xcode/DerivedData/**/SourcePackages
            ~/Library/Caches/org.swift.swiftpm
          key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved', '**/*.xcodeproj/project.pbxproj') }}
          restore-keys: |
            ${{ runner.os }}-spm-

      # Cache CocoaPods dependencies (if you use them)
      - name: Cache CocoaPods
        if: hashFiles('Podfile.lock') != ''
        uses: actions/cache@v4
        with:
          path: Pods
          key: ${{ runner.os }}-pods-${{ hashFiles('Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pods-

      - name: Install xcbeautify
        run: |
          if ! command -v xcbeautify &> /dev/null; then
            brew install xcbeautify
          fi

      # Set custom DerivedData path for better caching control
      - name: Build Xcode Archive (Unsigned)
        run: |
          DERIVED_DATA_PATH="${HOME}/Library/Developer/Xcode/DerivedData/${SCHEME_NAME}-build"
          
          set -o pipefail && xcodebuild archive \
            -project "$PROJECT_NAME" \
            -scheme "$SCHEME_NAME" \
            -configuration Release \
            -archivePath "./build/${APP_NAME}.xcarchive" \
            -derivedDataPath "$DERIVED_DATA_PATH" \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_REQUIRED=NO \
            COMPILER_INDEX_STORE_ENABLE=NO \
          | xcbeautify

      - name: Create ExportOptions.plist for Unsigned Export
        run: |
          cat > ./ExportOptions.plist <<- EOM
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>method</key>
              <string>mac-application</string>

              <key>signingStyle</key>
              <string>manual</string>
              <key>signingCertificate</key>
              <string></string>
              <key>provisioningProfiles</key>
              <dict/>
          </dict>
          </plist>
          EOM

      - name: Export .app from Archive (Unsigned)
        run: |
          xcodebuild -exportArchive \
            -archivePath "./build/${APP_NAME}.xcarchive" \
            -exportPath "./build" \
            -exportOptionsPlist ./ExportOptions.plist

      - name: Create DMG with fixed filename
        run: |
          hdiutil create -volname "${APP_NAME} ${VERSION}" \
            -srcfolder "./build/${APP_NAME}.app" \
            -ov -format UDZO \
            "./build/${DMG_FILENAME}"

      - name: Get DMG file size
        id: get_dmg_info
        run: |
          DMG_PATH="./build/${DMG_FILENAME}"
          echo "DMG_SIZE=$(stat -f%z "$DMG_PATH")" >> $GITHUB_ENV

      - name: Generate update.json with public URL
        id: generate_json
        run: |
          # This URL is now stable and public because it points to a release asset.
          DOWNLOAD_URL="https://github.com/${{ github.repository }}/releases/download/${{ env.DEV_RELEASE_TAG }}/${{ env.DMG_FILENAME }}"
        
          jq -n \
            --arg version "${VERSION}" \
            --arg url "$DOWNLOAD_URL" \
            --argjson size "${{ env.DMG_SIZE }}" \
            '{
              "version": $version,
              "url": $url,
              "fileSize": $size,
              "releaseNotes": "Development build from commit ${{ env.VERSION }}."
            }' > ./update.json

      # Delete existing release if it exists
      - name: Delete existing release
        uses: dev-drprasad/delete-tag-and-release@v1.1
        with:
          tag_name: ${{ env.DEV_RELEASE_TAG }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          delete_release: true
        continue-on-error: true

      - name: Publish to Development Pre-Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.DEV_RELEASE_TAG }}
          prerelease: true
          name: "Latest Development Build (${{ env.VERSION }})"
          body: "This pre-release contains the latest build from the `main` branch. Automatically updated on every push."
          files: |
            ./build/${{ env.DMG_FILENAME }}
            ./update.json

      # Clean up old caches periodically
      - name: Cleanup old caches
        if: github.event_name == 'push'
        run: |
          # Remove old DerivedData (older than 7 days)
          find ~/Library/Developer/Xcode/DerivedData -maxdepth 1 -type d -mtime +7 -exec rm -rf {} + 2>/dev/null || true
